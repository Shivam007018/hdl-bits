module top_module(
    input clk,
    input areset,    // Freshly brainwashed Lemmings walk left.
    input bump_left,
    input bump_right,
    input ground,
    input dig,
    output reg walk_left,
    output reg walk_right,
    output reg aaah,
    output reg digging ); 
    
    reg [2:0] state, next_state;
    reg [4:0] fall_count;

    parameter L = 3'b000,
              R = 3'b001,
              FL = 3'b010,
              FR = 3'b011,
              DIG_L = 3'b100,
              DIG_R = 3'b101,
              SPLAT = 3'b110;

    // Asynchronous reset
    always @(posedge clk or posedge areset) begin
        if (areset) begin
            state <= L;
            fall_count <= 0;
        end else begin
            state <= next_state;
            if (state == FL || state == FR)
                fall_count <= fall_count + 1;
            else
                fall_count <= 0;
        end
    end

    // State transition logic
    always @(*) begin
        next_state = state;
        case (state)
            L: begin
                if (!ground)
                    next_state = FL;
                else if (dig)
                    next_state = DIG_L;
                else
                    next_state = bump_left ? R : L;
            end
            R: begin
                if (!ground)
                    next_state = FR;
                else if (dig)
                    next_state = DIG_R;
                else
                    next_state = bump_right ? L : R;
            end
            FL: begin
                if (ground)
                    next_state = (fall_count >= 20) ? SPLAT : L;
                else
                    next_state = FL;
            end
            FR: begin
                if (ground)
                    next_state = (fall_count >= 20) ? SPLAT : R;
                else
                    next_state = FR;
            end
            DIG_L: next_state = ground ? DIG_L : FL;
            DIG_R: next_state = ground ? DIG_R : FR;
            SPLAT: next_state = SPLAT;
        endcase
    end

    // Output logic
    always @(*) begin
        // Default values
        walk_left = 0;
        walk_right = 0;
        aaah = 0;
        digging = 0;

        case (state)
            L: walk_left = 1;
            R: walk_right = 1;
            FL, FR: aaah = 1;
            DIG_L, DIG_R: digging = 1;
            SPLAT: begin
                walk_left = 0;
                walk_right = 0;
                aaah = 0;
                digging = 0;
            end
        endcase
    end

endmodule
